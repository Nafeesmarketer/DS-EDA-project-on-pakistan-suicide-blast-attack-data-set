# -*- coding: utf-8 -*-
"""Copy of pakistan blast data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-NpVfyf3MNomQEyk4v2bsVs2ZuTLVHQX
"""

!pip install pandas
import pandas as pd
!pip install seaborn
import seaborn as sns
!pip install matplotlib
import matplotlib.pyplot as plt

sda=pd.read_csv("/content/Suicide_bombing_attacks.csv")

sda.head(2)

sda.describe()

sda.tail(2)

sda.info()

sda.count()

sda.shape

sda.dtypes

sda["Province"].describe()

sda["No. of Suicide Blasts"].describe()

sda["City"].describe()

sda["Location"].describe()

sdup=sda[sda.duplicated()]
print("number of duplicate rows: ",sdup.shape)

#before removing duplicate rows
sda.shape

sda=sda.drop_duplicates()

#after removing duplicates shape is
sda.shape

#identifing missing data within column
print(sda.isnull().sum())

sda["Influencing Event/Event"].describe()

#showcasing Missing Data
sns.heatmap(sda.isnull(),yticklabels=False,cbar=False,cmap='tab20c_r')
plt.title("Missing Data")
plt.show()

f_sda=sda[["Date","City","Province","Location","Location Category","Location Sensitivity","Target Type","Killed Max","Injured Max","No. of Suicide Blasts"]]

f_sda.head(1)

#showcasing Missing Data

sns.heatmap(f_sda.isnull(),yticklabels=False,cbar=False,cmap="tab20c_r")
plt.title("missing data of F_DSA")
plt.show()

f_sda["No. of Suicide Blasts"].describe()

f_sda["No. of Suicide Blasts"].fillna(1.117647)

f_sda["No. of Suicide Blasts"].describe()

f_sda["No. of Suicide Blasts"].count()

sns.heatmap(f_sda.isnull(),yticklabels=False,cbar=False,cmap="tab20c_r")
plt.title("missing data of F_DSA")
plt.show()

f_sda["Injured Max"].describe()

f_sda["Injured Max"].count()

f_sda.dropna(inplace=True)

f_sda.dtypes

sns.heatmap(f_sda.isnull(),yticklabels=False,cbar=False,cmap="tab20c_r")
plt.title("missing data of F_DSA")
plt.show()

f_sda.describe()

f_sda.info()

plt.figure(figsize=(30,3))
sns.barplot(x='Target Type',y='Killed Max',data=f_sda)
plt.show()

plt.figure(figsize=(30,4))
sns.barplot(x='Province',y='Killed Max',data=f_sda)
plt.show()

f_sda.head()

#detecting outliers and geting five number summary
sns.boxplot(x=f_sda['Killed Max'])

sns.boxplot(x=f_sda['Injured Max'])

#inter quartile range
Q1=f_sda['Killed Max'].quantile(0.25)
Q3=f_sda['Killed Max'].quantile(0.75)
IQR=Q3-Q1
print(IQR)

sns.barplot(x=f_sda['Location Sensitivity'],y=f_sda['No. of Suicide Blasts'])

sns.barplot(x=f_sda['Location Sensitivity'],y=f_sda['Killed Max'])

plt.figure(figsize=(30,3))
sns.barplot(x=f_sda['Location Category'],y=f_sda['Killed Max'])
plt.show()

sns.distplot(f_sda['Killed Max'])

sns.distplot(f_sda['No. of Suicide Blasts'])

sns.countplot(x=f_sda["No. of Suicide Blasts"])

sns.heatmap(f_sda[['Killed Max','No. of Suicide Blasts']].corr(),cmap="YlGnBu",annot=True,fmt=".2f")

plt.figure(figsize=(15,8))
sns.barplot(x='Province',y='Killed Max',hue='Location Sensitivity',data=f_sda)
plt.show()

plt.figure(figsize=(15,8))
sns.barplot(x='Province',y='No. of Suicide Blasts',hue='Location Sensitivity',data=f_sda)
plt.show()

plt.figure(figsize=(12,8))
sns.barplot(x="Province",y="No. of Suicide Blasts",data=f_sda)
plt.show()

plt.figure(figsize=(12,8))
sns.barplot(x="Province",y="Killed Max",data=f_sda)
plt.show()

"""THANKS FOR WATCHING

"""